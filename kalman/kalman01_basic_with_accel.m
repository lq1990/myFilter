clc;clear;
close all;
% ==============================
% time-varying Kalman Filter design
% params given by user:
% 
% 
% ==============================

dt = 1; % => sampleFreq is 1hz, 1time/1s
size = 100;
a = zeros(size, 1); % acceleration
a(10:15) = 0.1;
a(50:55) = -0.1;

t= 1:size;
% Z = dt * t + 0.5*a*t.^2; % observe values¡£ position is observed, 1m 2m 3m...
v = ones(size, 1)*0.1;
std = 5;
noise =std*randn(size, 1); % gauss noise with var

srcZ = zeros(size, 1)+10;
for i=2:size
    v(i) = v(i-1) + a(i)*1;
    srcZ(i) = srcZ(i-1)+ v(i)*1 + 1/2 * a(i) * 1*1;
end
Z = srcZ + noise;

% srcZ = [10,10.1000000000000,10.2000000000000,10.3000000000000,10.4000000000000,10.5000000000000,10.6000000000000,10.7000000000000,10.8000000000000,12.4000000000000,15.0000000000000,18.6000000000000,23.2000000000000,28.8000000000000,35.4000000000000,41.5000000000000,47.6000000000000,53.7000000000000,59.8000000000000,65.9000000000000,72,78.1000000000000,84.2000000000000,90.3000000000000,96.4000000000000,102.500000000000,108.600000000000,114.700000000000,120.800000000000,126.900000000000,133.000000000000,139.100000000000,145.200000000000,151.300000000000,157.400000000000,163.500000000000,169.600000000000,175.700000000000,181.800000000000,187.900000000000,194.000000000000,200.100000000000,206.200000000000,212.300000000000,218.400000000000,224.500000000000,230.600000000000,236.700000000000,242.800000000000,247.400000000000,251.000000000000,253.600000000000,255.200000000000,255.800000000000,255.400000000000,255.500000000000,255.600000000000,255.700000000000,255.800000000000,255.900000000000,256.000000000000,256.100000000000,256.200000000000,256.300000000000,256.400000000000,256.500000000000,256.600000000000,256.700000000000,256.800000000000,256.900000000000,257,257.100000000000,257.200000000000,257.300000000000,257.400000000000,257.500000000000,257.600000000000,257.700000000000,257.800000000000,257.900000000000,258.000000000000,258.100000000000,258.200000000000,258.300000000000,258.400000000000,258.500000000000,258.600000000000,258.700000000000,258.800000000000,258.900000000000,259.000000000000,259.100000000001,259.200000000001,259.300000000001,259.400000000001,259.500000000001,259.600000000001,259.700000000001,259.800000000001,259.900000000001]';
% Z = [20.4944200412035,8.27538075804650,5.51186767826263,7.38052985571731,12.3245754130486,10.0512833289514,-0.910869177388888,11.3245904860740,11.4637501583000,19.0842233714985,14.6405131597051,33.0341907748432,26.1598906148129,29.2191750115317,35.8541407432972,43.2724891654683,51.4590203064722,49.3434601509448,59.2326871595466,66.2926639305059,85.7343116342150,69.7751526254261,84.9837293436612,91.2468523616784,89.0695408504538,102.713640837727,101.993088124203,112.176586655662,125.510884343934,124.298911311175,133.619890372167,145.814265753111,144.878068283932,154.434332032267,159.633975246150,163.164769541045,172.318780231228,177.909760212582,180.115341181126,187.324809920253,187.056030858567,202.304533380273,193.694677106309,214.363385627946,214.446328121084,224.560725736298,230.116030085335,242.243950843147,243.632731080916,249.739708665258,250.427781585353,251.210441524626,256.154184840309,264.496778166327,264.116308217863,256.366584546168,255.936264594079,256.704688077444,246.795281816426,249.581540394568,257.108952502092,256.644878852992,259.391755953878,249.776628706057,247.556775707407,259.054011600015,253.907861237763,255.626656058115,249.200103617448,255.593936634190,252.475274762428,266.943534607548,260.417163146159,256.923815828607,249.952175746663,261.350144895985,262.451858176197,267.441533481445,265.827019689228,249.449179526298,254.131459014125,263.661485948457,257.478155120145,265.966797243061,254.527683306896,256.493991433903,260.554392776162,260.001120592600,259.911532537350,255.099382770218,251.000039827257,256.402278234368,266.309368719896,261.054702663073,261.026270873431,254.227470332276,259.794268130561,255.977743657299,253.185845586775,264.007115050906]';

% init state of X,P
X = [10; 0]; % state [p; v]
% P = [1 0; 0 1]; % Cov matrix of state
P = [0,0;0,0];

F = [1 dt; 0 1]; % state transition matrix

B = [dt*dt/2; dt];
u = a;

% we are sure model uncertainty is low
Q = [0.01, 0; 0 0.01]; % Cov matrix of model or outside uncertainty
% Q = [0,0; 0,0];

H = [1, 0]; % observe matrix, only position is observed, z = H * [p; v] + r
R = std*std; % observe noise Cov. same as noise with var

figure;
hold on; grid on;

x_pred = zeros(1,size);
v_pred = zeros(1,size);
filtered = zeros(size, 1);

flag =2;
if flag == 1
    for i=1:size
       % predict x_,P_
       if i==1
           X = F*X;
       else 
            X = F*X + B*u(i-1);
       end
      
       P = F*P*F'+Q; 
       
       % update x,P using z
       K = P*H'*inv(H*P*H' + R); % kalman coef
       X= X + K*(Z(i) - H*X);
       P = (eye(2) - K*H) * P; 

       x_pred(i) = X(1);
       v_pred(i) = X(2);
       filtered(i) = H*X; % filtered response
       plot(X(1), X(2), 'k.'); % [p, v]
    end
else
    for i=1:size
       % update x,P using z
       K = P*H'*inv(H*P*H' + R); % kalman coef
       X= X + K*(Z(i) - H*X);
       P = (eye(2) - K*H) * P; 

       x_pred(i) = X(1);
       v_pred(i) = X(2);
       filtered(i) = H*X; % filtered response
       plot(X(1), X(2), 'k.'); % [p, v]

       % predict x_,P_
       X = F*X + B*u(i);
       P = F*P*F'+Q; 
    end
end


xlabel('position');
ylabel('velocity');

figure;
plot(1:size, Z, 'r-.', 'LineWidth', 2); hold on; grid on;
plot(1:size, filtered, 'k', 'LineWidth', 2);
plot(1:size, srcZ, 'b--', 'LineWidth', 2);
xlabel('time');
ylabel('position');
legend('measured position','filtered', 'src without noise', 'Location', 'NW');

mse_filtered = mse(srcZ, filtered);
mse_measure = mse(srcZ, Z);

%% simulink
ydata.time = 1:size;
ydata.signals.values = Z;
udata.time = 1:size;
udata.signals.values = u;

sim('sim_kalman03_p_u.slx')

figure;
plot(Z,'r','LineWidth',1); hold on; grid on;
plot(filtered, 'k', 'LineWidth', 2);
plot(srcZ, 'b', 'LineWidth', 2);
plot(xe1.signals.values, 'k--', 'LineWidth',2);
title('p u');
legend('sensor1','filtered', 'src without noise', 'sim');

figure;
hold on; grid on;
plot(filtered, 'k', 'LineWidth', 2);
plot(srcZ, 'b', 'LineWidth', 2);
plot(xe1.signals.values, 'k--', 'LineWidth',2);
title('code vs. sim');
legend('filtered', 'src without noise', 'sim');


mse1_code=mse(srcZ, filtered);
mse2_sim=mse(srcZ, xe1.signals.values);





